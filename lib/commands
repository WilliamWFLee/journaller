cmd_help() {
  cat <<- EOF
Syntax: ${JOURNALLER_COMMAND:-$0} <subcommand> <args>

Possible subcommands:
  new             write a new entry
  read            read journal entries
  copy            copy the entire journal to another directory
  encrypt         encrypt any unencrypted entries
  config          configure journaller
  help            display this help
  new-passphrase  add/update the journal password in the keyring
  migrate         migrate the journal to a new format if required
EOF
}

cmd_new() {
  set_new_entry "$(current_date)"

  local file="$CURRENT_ENTRY_DIR/text.md"
  echo -ne "**$(current_time)**\n\n" >> "$file"
  vim "$file"
}

cmd_read() {
  set_current_entry_from_date_text $1
  case $? in
    1)
      log_error "Journal entry directory does not exist for $(path_to_date $1)"
      return 1
      ;;
    2)
      log_error "Root document not found in journal entry $(path_to_date $1)"
      return 1
      ;;
  esac

  log_info "Opening journal entry"
  log_info "Retrieving passphrase to decrypt journal entry"
  retrieve_or_read_passphrase

  decrypt_dir $CURRENT_ENTRY_DIR || return 1

  pandoc -f markdown -t html $CURRENT_ENTRY_DIR/text.md > $CURRENT_ENTRY_DIR/text.html
  open $CURRENT_ENTRY_DIR/text.html 2> /dev/null

  log_info "Opening in browser, press <Return> to continue" && read
  log_info "Shredding rendered journal entry and re-encrypting files"

  shred_file $CURRENT_ENTRY_DIR/text.html
  encrypt_dir $CURRENT_ENTRY_DIR
}

cmd_copy() {
  rsync -av --modify-window=1 --times --inplace "$(echo $JOURNAL_DIR | sed 's/\/$//g')" "$1"
}

cmd_encrypt() {
  log_info "Encrypting any unencrypted entries..."

  if keyring_enabled; then
    retrieve_or_read_passphrase
  else
    new_passphrase
  fi
  case $? in
    1)
      log_error "Passphrase is empty"
      return 1
      ;;
    2)
      log_error "Passphrases do not match"
      return 1
      ;;
  esac

  for entry in $JOURNAL_DIR/*/*/*; do
    encrypt_dir "$entry" && log_info "Encrypted entry for $(echo $entry | extract_date_from_path)"
  done
}

cmd_config() {
  case $1 in
  new)
    if create_config_file; then
      log_info "Config file created"
    else
      log_info "Config file already exists"
    fi
    ;;
  *)
    local config_key="$1"
    local config_value="$2"
    if [[ -z "$config_value" ]]; then
      get_config_key "$config_key"
    else
      set_config_key "$config_key" "$config_value"
    fi
  esac
}

cmd_new_passphrase() {
  if keyring_enabled; then
    if set_and_save_new_passphrase; then
      log_info "Password successfully changed and saved to keyring"
    else
      log_error "Password was not updated"
    fi
  else
    log_error "Keyring usage has been disabled"
    log_error "To enable, run 'journaller config use-keyring on'"
  fi
}

cmd_migrate() {
  log_info 'Checking if journal has been migrated'
  if requires_migration; then
    log_info 'Journal migration needed'
    migrate_journal_format
  else
    log_info 'Journal already migrated, no action needed'
  fi
}
