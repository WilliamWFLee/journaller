LIB_DIR=$(dirname $BASH_SOURCE)

. "$LIB_DIR/logging"
. "$LIB_DIR/date"
. "$LIB_DIR/shredding"
. "$LIB_DIR/encryption"
. "$LIB_DIR/passphrase"

shopt -s extglob globstar nullglob

_journal_new() {
  dir="$JOURNAL_DIR/$(_current_date)"
  mkdir -p "$dir"

  file="$dir/text.md"
  echo -ne "**$(_current_time)**\n\n" >> "$file"
  vim "$file"

  if [[ "$@" == *"--encrypt"* ]]; then  
    _journal_encrypt
  fi
}

_journal_read() {
  date=$1
  if [[ -z $date ]]; then
    date="$(_current_date)"
  fi
  dir="$JOURNAL_DIR/${date//-/\/}"

  if [[ ! -d $dir ]]; then
    log_error "Journal entry does not exist for $date"
    exit 1
  fi

  _read_passphrase 'Enter passphrase: '

  for file in $dir/*.gpg; do
    _journal_decrypt_file $file
    case $? in
    0)
      log_info "Decrypted $file";;
    1)
      log_warn "$file already decrypted, skipping...";;
    2)
      log_error "Failed to decrypt $file, check key"
      exit 1;;
    esac
  done


  pandoc -f markdown -t html $dir/text.md > $dir/text.html
  open $dir/text.html 2> /dev/null

  log_info "Opening in browser, press <Return> to continue" && read
  log_info "Shredding decrypted files"
  for file in $dir/!(*.gpg); do
    _journal_shred_file $file
    case $? in
    0)
      log_info "Shredded $file";;
    1)
      log_warn "$file was skipped as it was not encrypted";;
    esac
  done
}

_journal_copy() {
  rsync -av --modify-window=1 --times --inplace "$(echo $JOURNAL_DIR | sed 's/\/$//g')" "$1"
}

_journal_encrypt() {
  log_info "Encrypting journal..."

  _new_passphrase
  case $? in
  1)
    log_error "Passphrase is empty" > /dev/stderr
    exit 1;;
  2)
    log_error "Passphrases do not match" > /dev/stderr
    exit 1;;
  esac

  for file in $JOURNAL_DIR/**/!(*.gpg); do
    if [[ -f "$file" && ! -f "$file.gpg" ]]; then 
      log_info "Encrypting and shredding $file" 
      _journal_encrypt_file "$file" "$PASSPHRASE" && _journal_shred_file $file
    fi
  done
}
