cmd_help() {
  cat <<- EOF
Syntax: ${JOURNALLER_COMMAND:-$0} <subcommand> <args>

Possible subcommands:
  read            read journal entries
  write           write a new entry or update an existing entry
  copy            copy the entire journal to another directory
  config          configure journaller
  new-passphrase  add/update the journal password in the keyring
  migrate         migrate the journal to a new format if required
  help            display this help
EOF
}

cmd_write() {
  if [[ -z "$JOURNAL_EDITOR" ]]; then
    log_error "You have not set your editor"
    log_error "Set it using 'journaller set editor <editor_command>'"
    exit 1
  elif ! commands_exist "$JOURNAL_EDITOR"; then
    log_error "Your configured editor '$JOURNAL_EDITOR' is not a valid command or path"
    log_error "Please check you've configured your editor correctly"
    exit 1
  fi

  retrieve_passphrase

  local path="$(interpret_date_text $1 today)"
  if [[ $? -ne 0 ]]; then
    log_error 'Date is not valid'
    log_error "Valid formats are: YYYY-MM-DD, YYYY/MM/DD, 'latest' or 'today' (default)"
  fi

  make_entry_dir "$path"
  local current_entry_dir="$(absolute_entry_dir $path)"
  decrypt_dir $current_entry_dir

  local file="$current_entry_dir/text.md"
  $JOURNAL_EDITOR "$file"

  encrypt_dir $current_entry_dir
}

cmd_read() {
  local path="$(interpret_date_text $1 latest)"
  local current_entry_dir="$(absolute_entry_dir $path)"
  if [[ ! -d "$current_entry_dir" ]]; then
    log_error "Journal entry directory does not exist for '$(path_to_date $path)'"
    return 1
  fi
  if ! entry_dir_has_encrypted_entry $current_entry_dir; then
    log_error "Root document not found in journal entry '$(path_to_date $path)'"
    return 1
  fi

  log_info "Opening journal entry"
  log_info "Retrieving passphrase to decrypt journal entry"
  retrieve_passphrase

  if decrypt_dir $current_entry_dir; then
    log_info 'Decrypted entry'
  else
    log_error 'Failed to decrypt entry'
    log_error 'Make sure the passphrase in the keychain is correct'
    return 1
  fi

  pandoc -f markdown -t html $current_entry_dir/text.md > $current_entry_dir/text.html
  open $current_entry_dir/text.html 2> /dev/null

  log_info "Opening in browser, press <Return> to continue" && read
  log_info "Shredding rendered journal entry and re-encrypting files"

  shred_file $current_entry_dir/text.html
  encrypt_dir $current_entry_dir
}

cmd_copy() {
  rsync -av --modify-window=1 --times --inplace "$(echo $JOURNAL_DIR | sed 's/\/$//g')" "$1"
}

cmd_config() {
  case $1 in
  new)
    if create_config_file; then
      log_info "Config file created"
    else
      log_info "Config file already exists"
    fi
    ;;
  *)
    local config_key="$1"
    local config_value="$2"
    if ! config_key_valid $config_key; then
      log_error "Config key '$config_key' is not valid"
      log_error "Possible keys are: ${VALID_CONFIG_KEYS[*]}" 
      exit 1
    fi
    if [[ -z "$config_value" ]]; then
      get_config_key "$config_key"
    else
      if ! set_config_key "$config_key" "$config_value"; then
        log_error 'Config value is not valid'
      fi
    fi
  esac
}

cmd_new_passphrase() {
  if set_and_save_new_passphrase; then
    log_info "Password successfully changed and saved to keyring"
  else
    log_error "Password was not updated"
  fi
}

cmd_migrate() {
  if requires_migration; then
    log_info 'Journal migration needed'
    migrate_journal_format
  else
    log_info 'Journal already migrated, no action needed'
  fi
}

cmd___autocomplete() {
  case $1 in
  entry_dates)
    get_all_entry_dates
    ;;
  valid_config_keys)
    echo "${VALID_CONFIG_KEYS[*]}"
    ;;
  commands)
    echo "$(compgen -c cmd_ | sed 's/cmd_// ; /^__.*$/d ; s/_/-/g')"
  esac
}
