cmd_help() {
  cat <<- EOF
Syntax: ${JOURNALLER_COMMAND:-$0} <subcommand> <args>

Possible subcommands:
  write           write a new entry or update an existing entry
  read            read journal entries
  copy            copy the entire journal to another directory
  config          configure journaller
  help            display this help
  new-passphrase  add/update the journal password in the keyring
  migrate         migrate the journal to a new format if required
EOF
}

cmd_write() {
  retrieve_passphrase

  path="$(interpret_date_text $1 today)"
  if [[ -z "$(echo $path | extract_date)" ]]; then
    log_error 'Date is not valid'
    log_error "Valid formats are: YYYY-MM-DD, YYYY/MM/DD, 'latest' or 'today' (default)"
    return 1
  fi
  make_entry_dir "$path"
  set_current_entry_dir "$path"
  decrypt_dir $CURRENT_ENTRY_DIR

  local file="$CURRENT_ENTRY_DIR/text.md"
  vim "$file"

  encrypt_dir $CURRENT_ENTRY_DIR
}

cmd_read() {
  path="$(interpret_date_text $1 latest)"
  set_current_entry_dir $path
  if [[ ! -d "$CURRENT_ENTRY_DIR" ]]; then
    log_error "Journal entry directory does not exist for '$(path_to_date $path)'"
    return 1
  fi
  if ! entry_dir_has_encrypted_entry $CURRENT_ENTRY_DIR; then
    log_error "Root document not found in journal entry '$(path_to_date $path)'"
    return 1
  fi

  log_info "Opening journal entry"
  log_info "Retrieving passphrase to decrypt journal entry"
  retrieve_passphrase

  if decrypt_dir $CURRENT_ENTRY_DIR; then
    log_info 'Decrypted entry'
  else
    log_error 'Failed to decrypt entry'
    log_error 'Make sure the passphrase in the keychain is correct'
    return 1
  fi

  pandoc -f markdown -t html $CURRENT_ENTRY_DIR/text.md > $CURRENT_ENTRY_DIR/text.html
  open $CURRENT_ENTRY_DIR/text.html 2> /dev/null

  log_info "Opening in browser, press <Return> to continue" && read
  log_info "Shredding rendered journal entry and re-encrypting files"

  shred_file $CURRENT_ENTRY_DIR/text.html
  encrypt_dir $CURRENT_ENTRY_DIR
}

cmd_copy() {
  rsync -av --modify-window=1 --times --inplace "$(echo $JOURNAL_DIR | sed 's/\/$//g')" "$1"
}

cmd_config() {
  case $1 in
  new)
    if create_config_file; then
      log_info "Config file created"
    else
      log_info "Config file already exists"
    fi
    ;;
  *)
    local config_key="$1"
    local config_value="$2"
    if [[ -z "$config_value" ]]; then
      get_config_key "$config_key"
    else
      set_config_key "$config_key" "$config_value"
    fi
  esac
}

cmd_new_passphrase() {
  if set_and_save_new_passphrase; then
    log_info "Password successfully changed and saved to keyring"
  else
    log_error "Password was not updated"
  fi
}

cmd_migrate() {
  if requires_migration; then
    log_info 'Journal migration needed'
    migrate_journal_format
  else
    log_info 'Journal already migrated, no action needed'
  fi
}
