requires_migration() {
  [[ ! -f "$(version_file_path)" || "$(cat $(version_file_path))" != "$VERSION" ]]
}

migrate_journal_format() {
  retrieve_passphrase
  for entry_dir in $JOURNAL_DIR/*/*/*; do
    if [[ -f "$entry_dir/entry.tar.gz.gpg" ]]; then
      log_info "Already migrated entry for $(echo $entry_dir | extract_date)"
    else
      log_info "Migrating entry for $(echo $entry_dir | extract_date)"
      old_decrypt_dir $entry_dir || return 1
      for file in $entry_dir/**/*.gpg; do
        shred_file $file
      done
      encrypt_dir $entry_dir
    fi
  done

  mkdir -p "$(dirname $(version_file_path))"
  echo $VERSION > "$(version_file_path)"
}

old_decrypt_dir() {
  local file
  for file in $1/**/*.gpg; do
    old_decrypt_file $file
    if [[ $? -eq 2 ]]; then
      log_error "Failed to decrypt $file, check key"
      return 1
    fi
  done
}

old_decrypt_file() {
  local file="$1"
  local decrypted_file="${file/.gpg/}"
  if [[ -f "$decrypted_file" ]]; then
    return 1
  fi

  if ! ( \
    gpg -d -o "$decrypted_file" --batch \
    --passphrase "$PASSPHRASE" "$file" > /dev/null 2>&1 \
  ); then
    return 2
  fi
}
